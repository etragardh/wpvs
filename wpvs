#!/usr/bin/env python3

#
# TODO:
# make a central SourceManager to control sources
# Individual Sources handle their respectively raw databases
# wpvs should build its own central DB
#

from importlib.machinery import SourceFileLoader
from threading import Thread
from queue import Queue
from parser import parser
from cprint import CPrint
import os, shutil

# Arguments
parser = parser.create()
args = parser.parse_args()

# Print
p = CPrint(debug=args.debug)

# Purge Cache
if args.purge:
  shutil.rmtree('cache/')
  os.makedirs('cache/', exist_ok=True)


# out
out = []

# Search
try:
  for source in os.listdir('source/'):
    if source in ['__pycache__'] or source.endswith('.swp'):
      continue
    p.v(f'loading: {source}')
    sm  = SourceFileLoader("Source Module",f'source/{source}').load_module()
    source_class = sm.VSource(debug = args.debug)
    res = source_class.search(
      cvss_min=args.cvss_min,
      cvss_max=args.cvss_max,
      unauth_only=args.unauth_only,
      age=args.age,
      type=args.type,
      slug=args.slug,
    )
    if res:
      out = out + res
except KeyboardInterrupt:
  p.info("Exiting")
  exit()


head = ['Slug', 'Vuln', 'CVSS', '.org', 'Inst', 'Pub', 'Auth', 'Source']
p.table(head, out)

